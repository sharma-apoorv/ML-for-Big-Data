{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"friendship-recommendation","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPBcWK6bMgwCaSVhFu06zMw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"5h7dOSGA_Gwy"},"source":["Write a Spark program that implements a simple “People You Might Know” social network friendship recommendation algorithm. The key idea is that if two people have a lot of mutual friends, then the system should recommend that they connect with each other.\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9EtmNhpN-77D","executionInfo":{"status":"ok","timestamp":1618324112971,"user_tz":420,"elapsed":53811,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}},"outputId":"2df64d39-ef51-4fe9-c441-fc1a10af92d5"},"source":["!pip install pyspark\n","!apt install openjdk-8-jdk-headless -qq\n","\n","import os\n","os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","\n","from itertools import combinations"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting pyspark\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/45/b0/9d6860891ab14a39d4bddf80ba26ce51c2f9dc4805e5c6978ac0472c120a/pyspark-3.1.1.tar.gz (212.3MB)\n","\u001b[K     |████████████████████████████████| 212.3MB 67kB/s \n","\u001b[?25hCollecting py4j==0.10.9\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9e/b6/6a4fb90cd235dc8e265a6a2067f2a2c99f0d91787f06aca4bcf7c23f3f80/py4j-0.10.9-py2.py3-none-any.whl (198kB)\n","\u001b[K     |████████████████████████████████| 204kB 39.9MB/s \n","\u001b[?25hBuilding wheels for collected packages: pyspark\n","  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyspark: filename=pyspark-3.1.1-py2.py3-none-any.whl size=212767604 sha256=80bf3b4f3074334c867d274027708944f9cd761465b42ce41e43458be5a77921\n","  Stored in directory: /root/.cache/pip/wheels/0b/90/c0/01de724414ef122bd05f056541fb6a0ecf47c7ca655f8b3c0f\n","Successfully built pyspark\n","Installing collected packages: py4j, pyspark\n","Successfully installed py4j-0.10.9 pyspark-3.1.1\n","The following additional packages will be installed:\n","  openjdk-8-jre-headless\n","Suggested packages:\n","  openjdk-8-demo openjdk-8-source libnss-mdns fonts-dejavu-extra\n","  fonts-ipafont-gothic fonts-ipafont-mincho fonts-wqy-microhei\n","  fonts-wqy-zenhei fonts-indic\n","The following NEW packages will be installed:\n","  openjdk-8-jdk-headless openjdk-8-jre-headless\n","0 upgraded, 2 newly installed, 0 to remove and 31 not upgraded.\n","Need to get 36.5 MB of archives.\n","After this operation, 143 MB of additional disk space will be used.\n","Selecting previously unselected package openjdk-8-jre-headless:amd64.\n","(Reading database ... 160983 files and directories currently installed.)\n","Preparing to unpack .../openjdk-8-jre-headless_8u282-b08-0ubuntu1~18.04_amd64.deb ...\n","Unpacking openjdk-8-jre-headless:amd64 (8u282-b08-0ubuntu1~18.04) ...\n","Selecting previously unselected package openjdk-8-jdk-headless:amd64.\n","Preparing to unpack .../openjdk-8-jdk-headless_8u282-b08-0ubuntu1~18.04_amd64.deb ...\n","Unpacking openjdk-8-jdk-headless:amd64 (8u282-b08-0ubuntu1~18.04) ...\n","Setting up openjdk-8-jre-headless:amd64 (8u282-b08-0ubuntu1~18.04) ...\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/orbd to provide /usr/bin/orbd (orbd) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/servertool to provide /usr/bin/servertool (servertool) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/tnameserv to provide /usr/bin/tnameserv (tnameserv) in auto mode\n","Setting up openjdk-8-jdk-headless:amd64 (8u282-b08-0ubuntu1~18.04) ...\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/idlj to provide /usr/bin/idlj (idlj) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsimport to provide /usr/bin/wsimport (wsimport) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jsadebugd to provide /usr/bin/jsadebugd (jsadebugd) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/native2ascii to provide /usr/bin/native2ascii (native2ascii) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javah to provide /usr/bin/javah (javah) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/hsdb to provide /usr/bin/hsdb (hsdb) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/clhsdb to provide /usr/bin/clhsdb (clhsdb) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/xjc to provide /usr/bin/xjc (xjc) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/schemagen to provide /usr/bin/schemagen (schemagen) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/extcheck to provide /usr/bin/extcheck (extcheck) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jhat to provide /usr/bin/jhat (jhat) in auto mode\n","update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsgen to provide /usr/bin/wsgen (wsgen) in auto mode\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VS6U3c6FB78g","executionInfo":{"status":"ok","timestamp":1618324141197,"user_tz":420,"elapsed":82026,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}},"outputId":"0beee275-ed07-471d-9728-32029ef1ff94"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NEM_jnhPAg5B","executionInfo":{"status":"ok","timestamp":1618324141599,"user_tz":420,"elapsed":82425,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["os.chdir('/content/drive/My Drive/CSE-547/Assignments/A1')"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"-7tu1C4ZCfZ8","executionInfo":{"status":"ok","timestamp":1618324142752,"user_tz":420,"elapsed":83575,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["# Let's import the libraries we will need\n","import pandas as pd\n","import numpy as np\n","\n","import pyspark\n","from pyspark.sql import *\n","from pyspark.sql.functions import *\n","from pyspark import SparkContext, SparkConf"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cDR_00TH3LBN"},"source":["We first create a Spark context. The Spark context is the main entry point for Spark functionality. A SparkContext represents the connection to a Spark cluster, and can be used to create RDDs, accumulators and broadcast variables on that cluster.\n"]},{"cell_type":"code","metadata":{"id":"q4jKSvvFCmAn","executionInfo":{"status":"ok","timestamp":1618324146770,"user_tz":420,"elapsed":87589,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["# create the session\n","conf = SparkConf().set(\"spark.ui.port\", \"4050\")\n","\n","# create the context\n","sc = pyspark.SparkContext(conf=conf)\n","spark = SparkSession.builder.getOrCreate()"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"0nSTVmm3CrMM","executionInfo":{"status":"ok","timestamp":1618324146772,"user_tz":420,"elapsed":87587,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["# !wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\n","# !unzip ngrok-stable-linux-amd64.zip\n","\n","# get_ipython().system_raw('./ngrok http 4050 &')\n","# !curl -s http://localhost:4040/api/tunnels | python3 -c \\\n","#     \"import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])\""],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nBKy1qjM3u3U"},"source":["We now read the file in using the `textFile()` function provided as part of the Spark API. The function will read a text file from a local file system (available on all nodes) and return it as an RDD of strings.\n","\n","Thus the variable `file_rdd` will be an RDD with the following underlying format:\n","\n","```\n","[\n","    '1\\t2,3,4,5...',\n","    '2\\t1,3,4,5...',\n","    '7\\t2,3,5,23...',\n","    ...\n","]\n","```"]},{"cell_type":"code","metadata":{"id":"PYdllNLtC0f9","executionInfo":{"status":"ok","timestamp":1618324147669,"user_tz":420,"elapsed":88480,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["Q1_FILE_PATH = 'q1/data/soc-LiveJournal1Adj.txt'\n","file_rdd = sc.textFile(Q1_FILE_PATH)"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5qFOGFPjEdf3","executionInfo":{"status":"ok","timestamp":1618324150712,"user_tz":420,"elapsed":91517,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}},"outputId":"3bb78dce-95c5-4f58-d80b-f9dab7c9b5a9"},"source":["file_rdd.take(5)"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['0\\t1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94',\n"," '1\\t0,5,20,135,2409,8715,8932,10623,12347,12846,13840,13845,14005,20075,21556,22939,23520,28193,29724,29791,29826,30691,31232,31435,32317,32489,34394,35589,35605,35606,35613,35633,35648,35678,38737,43447,44846,44887,49226,49985,623,629,4999,6156,13912,14248,15190,17636,19217,20074,27536,29481,29726,29767,30257,33060,34250,34280,34392,34406,34418,34420,34439,34450,34651,45054,49592',\n"," '2\\t0,117,135,1220,2755,12453,24539,24714,41456,45046,49927,6893,13795,16659,32828,41878',\n"," '3\\t0,12,41,55,1532,12636,13185,27552,38737',\n"," '4\\t0,8,14,15,18,27,72,80,15326,19068,19079,24596,42697,46126,74,77,33269,38792,38822']"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"ioMj-b_i4l1R"},"source":["We now parse each string contained in the `file_rdd` variable. A format relevant that we can use later on will be in the form of keys and values. Thus, we will set the following keys and values for each line we are parsing:\n","\n","**key** : The user id of the person\n","\n","**value** : The list of user ids of their friends\n","\n","As a result, we should obtain the following structure in the `parsed_file_rdd` variable:\n","\n","```\n","[\n","    (1, [2, 3, 4, 5, ...]),\n","    (2, [1, 3, 4, 5, ...]),\n","    (7, [2, 3, 5, 23, ...]),\n","    ...\n","]\n","```"]},{"cell_type":"code","metadata":{"id":"J06FXQbPEKJ2","executionInfo":{"status":"ok","timestamp":1618324150714,"user_tz":420,"elapsed":91516,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["def parse_file_line(line):\n","    line = line.strip()\n","\n","    try:\n","        user, friends_str = line.split('\\t')\n","    except ValueError:\n","        user, friends_str = line, \"\"\n","\n","    # convert the user_id to an int\n","    user = int(user)\n","\n","    friends_list = []\n","    if friends_str:\n","        # ensure all elements are ints\n","        friends_list = list(map(int, friends_str.split(',')))\n","\n","    return ((user, friends_list))"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"GKI-J8jhTn85","executionInfo":{"status":"ok","timestamp":1618324150715,"user_tz":420,"elapsed":91514,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["# parse the file and obtain into a relavant format for Spark to process\n","parsed_file_rdd = file_rdd.map(parse_file_line)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"opSpFJfUE9-J","executionInfo":{"status":"ok","timestamp":1618324150716,"user_tz":420,"elapsed":91511,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["# parsed_file_rdd.take(5)"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EhJaobL95s8j"},"source":["Now that we have a format that we can work with, we need to encode some usefule information so that we can find the mutual friends and eventually reccomend users some new friends. Lets take the following entry as an example:\n","\n","`(1, [2, 3, 4, 5])`\n","\n","Here we know 1 has the following friends: 2, 3, 4, 5. This information is not very relevant, since we are trying to find **mutual friends**. However, we know that each pair of friends in the list have user_id 1 as a mutual friend. To further clarify, The following pairs (2,3), (2,4), (2,5), ... all have 1 as their mutual friend. This information is useful for us.\n","\n","We will want our RDD to have the following structure:\n","\n","```\n","[\n","    (user_id_1, user_id_2) : 0, \n","    (user_id_3, user_id_4) : 1,\n","    ...\n","]\n","```\n","\n","Here the `0` indicates that `user_id_1` and `user_id_2` are **direct friends**. \n","\n","The `1` indicates that `user_id_3` and `user_id_4` have some **mutual friend** in common."]},{"cell_type":"code","metadata":{"id":"huTSUOM2TtVn","executionInfo":{"status":"ok","timestamp":1618324150717,"user_tz":420,"elapsed":91509,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["def map_friend_tuples(friends_tuple):\n","    user, friends = friends_tuple\n","\n","    IS_FRIEND = float('-inf')\n","    HAS_MUTUAL_FRIEND = 1 # we set this to 1, as we will sum up the values later\n","\n","    friends_tuple_list = []\n","\n","    for friend_id in friends:\n","        friend_key = tuple(sorted([user, friend_id]))\n","        friends_tuple_list.append( (friend_key, IS_FRIEND) ) # encode the user and current friend_id are friends\n","    \n","    mutual_friend_list = combinations(friends, 2)\n","    for f1, f2 in mutual_friend_list:\n","        mutual_friend_key = tuple(sorted([f1, f2]))\n","\n","        friends_tuple_list.append( (tuple(mutual_friend_key), HAS_MUTUAL_FRIEND) )\n","    \n","    return friends_tuple_list"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DGh4Dkj2UIcK","executionInfo":{"status":"ok","timestamp":1618324150718,"user_tz":420,"elapsed":91507,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}},"outputId":"3356aa21-72a5-4e1e-dbb3-f7c1eba23798"},"source":["friends_rdd = parsed_file_rdd.flatMap(map_friend_tuples)\n","friends_rdd.cache()"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PythonRDD[3] at RDD at PythonRDD.scala:53"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"zqL6m1-CFOzE","executionInfo":{"status":"ok","timestamp":1618324150719,"user_tz":420,"elapsed":91505,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["# friends_rdd.take(5)"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BkB3NlDI7_G0"},"source":["We can now add all the values for each key and obtain how many mutual friends each pair has. The underlying structure after the execution will be as follows:\n","\n","```\n","[\n","    (user_id_1, user_id_2) : 0, \n","    (user_id_3, user_id_4) : 14,\n","    (user_id_5, user_id_6) : 4,\n","    (user_id_7, user_id_8) : 7,\n","    (user_id_9, user_id_10) : 9,\n","    (user_id_11, user_id_12) : 323,\n","    ...\n","]\n","```"]},{"cell_type":"code","metadata":{"id":"rlVtqR0hZuQN","executionInfo":{"status":"ok","timestamp":1618324416969,"user_tz":420,"elapsed":350,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["mutual_friends_count_rdd = friends_rdd.reduceByKey(lambda a, b: a + b).filter(lambda x: x[1] > 0)\n","# mutual_friends_count_rdd = friends_rdd.groupByKey().filter(lambda edge: float('-inf') not in edge[1]).map(lambda edge: (edge[0], sum(edge[1])))"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"pCqp8ZzrF8u7","executionInfo":{"status":"ok","timestamp":1618324150721,"user_tz":420,"elapsed":91502,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["# mutual_friends_count_rdd.take(5)"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x2obdHjI8pAa"},"source":["We again need to restructure the format of our RDD. At this point we know how many friends each pair has. However, we want to find out for each user what which second user has the most number of friends. As a result we will restructure to the following format:\n","\n","```\n","[\n","    (user_id_1, user_id_2),  0, --> (user_id_1, (user_id_2, 0)),\n","    (user_id_3, user_id_4), 14, --> (user_id_3, (user_id_4, 14))\n","    ...\n","]\n","```\n","\n"]},{"cell_type":"code","metadata":{"id":"r3JQjNxAhF16","executionInfo":{"status":"ok","timestamp":1618324421036,"user_tz":420,"elapsed":313,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["mutual_friends_count_remap_rdd = mutual_friends_count_rdd.map(lambda info : (info[0][0], (info[0][1], info[1])) )"],"execution_count":23,"outputs":[]},{"cell_type":"code","metadata":{"id":"3c18I-QUGoNN","executionInfo":{"status":"ok","timestamp":1618324150724,"user_tz":420,"elapsed":91499,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["# mutual_friends_count_remap_rdd.take(5)"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YHwGLZ7a3lHS"},"source":["Now that the key has been transformed to a single variable that is not unique across the elements in the list, we can group up the keys and sort based on the number of mutual friends. \n","\n","We first apply a `groupByKey` operation and obtain a list of values for that particular user. This may look as follows:\n","\n","(friend_id, number_of_mutual_friends)\n","```\n","[(3, 45), (10, 278), (3, 75), ...]\n","```\n","\n","The above list shows all the how many mutual friends a user has with another user. We then sort based on the `number_of_mutual_friends` in a **descending** order and then sort based on the `friend_id` in an ascending order, to break any ties. For the purpose of the algorithm, we will only show the top 10 reccomended friends. \n","\n","Once sorted, we can then just return a list of friends and get rid of the counts. "]},{"cell_type":"code","metadata":{"id":"nYBG7rZe-meA","executionInfo":{"status":"ok","timestamp":1618324150725,"user_tz":420,"elapsed":91497,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["def get_reccomendations(mutual_friend_count_list, num_reccomendations=10):\n","\n","    top_reccomendation_pairs = sorted( mutual_friend_count_list, key = lambda pair: (-pair[1], pair[0]) )[:num_reccomendations]\n","\n","    reccomendations = [pair[0] for pair in top_reccomendation_pairs]\n","\n","    return reccomendations"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q6du4wtt-F7Y","executionInfo":{"status":"ok","timestamp":1618324425711,"user_tz":420,"elapsed":285,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["friend_reccomendations_rdd = mutual_friends_count_remap_rdd.groupByKey().mapValues(get_reccomendations)"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"id":"YHdhHCqIB8D4","executionInfo":{"status":"ok","timestamp":1618324632994,"user_tz":420,"elapsed":205173,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["reccomendations = friend_reccomendations_rdd.collect()"],"execution_count":25,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gnzHcSh-5VVX"},"source":["We now sort based on the user id (each key) for uniformness. "]},{"cell_type":"code","metadata":{"id":"VH-tKrIhC3se","executionInfo":{"status":"ok","timestamp":1618324979617,"user_tz":420,"elapsed":308,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["reccomendations.sort(key=lambda pair: pair[0])"],"execution_count":26,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XFMuICWq5gyY"},"source":["We finally write the result to an output file, in a similar format as the input file"]},{"cell_type":"code","metadata":{"id":"vWweQGBI5gZ-","executionInfo":{"status":"ok","timestamp":1618324982140,"user_tz":420,"elapsed":291,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["def write_reccomendations_to_file(reccomendations_list):\n","\n","    lines = []\n","    for user, friends_recc in reccomendations_list:\n","        user_str = str(user)\n","        friends_str = ','.join(map(str, friends_recc)) \n","\n","        if friends_str:\n","            line = user_str + '\\t' + friends_str + '\\n'\n","        else:\n","            line = user_str + '\\t' + '\\n'\n","\n","        lines.append(line)\n","    \n","    with open('friend_reccomendations.txt', 'w') as f:\n","        f.writelines(lines)\n","        "],"execution_count":27,"outputs":[]},{"cell_type":"code","metadata":{"id":"6Jl0yZ8M7W2m","executionInfo":{"status":"ok","timestamp":1618324985822,"user_tz":420,"elapsed":1032,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}}},"source":["write_reccomendations_to_file(reccomendations)"],"execution_count":28,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ek8C7ffEGZ8f","executionInfo":{"status":"ok","timestamp":1618324986325,"user_tz":420,"elapsed":292,"user":{"displayName":"Apoorv Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjO0ftIG0bDuKlCjMrdHvLDCwUreEcBf3lAT5gp=s64","userId":"09578640252499880764"}},"outputId":"b44a1cf2-9b04-4701-f036-fb606c45557e"},"source":["submission_user_id_list = set([924, 8941, 8942, 9019, 9020, 9021, 9022, 9990, 9992, 9993])\n","\n","output_list = []\n","for user, friends_recc in reccomendations:\n","    if user in submission_user_id_list:\n","        output_list.append((user, friends_recc))\n","\n","output_list"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(924, [2409, 6995, 11860, 15416, 43748, 45881]),\n"," (8941, [8943, 8944]),\n"," (8942, [8943, 8944]),\n"," (9019, [9022, 9023]),\n"," (9020, [9021, 9022, 9023]),\n"," (9021, [9022, 9023]),\n"," (9022, [9023]),\n"," (9990, [13134, 13478, 13877, 34299, 34485, 34642, 37941]),\n"," (9992, [35667]),\n"," (9993, [13134, 13478, 13877, 34299, 34485, 34642, 37941])]"]},"metadata":{"tags":[]},"execution_count":29}]}]}